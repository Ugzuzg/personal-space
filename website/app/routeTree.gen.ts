/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LangImport } from './routes/$lang'
import { Route as IndexImport } from './routes/index'
import { Route as LangIndexImport } from './routes/$lang/index'
import { Route as LangResolingImport } from './routes/$lang/resoling'
import { Route as LangClimbingIndexImport } from './routes/$lang/climbing/index'
import { Route as LangClimbingUserIdImport } from './routes/$lang/climbing/$userId'

// Create/Update Routes

const LangRoute = LangImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LangIndexRoute = LangIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangRoute,
} as any)

const LangResolingRoute = LangResolingImport.update({
  id: '/resoling',
  path: '/resoling',
  getParentRoute: () => LangRoute,
} as any)

const LangClimbingIndexRoute = LangClimbingIndexImport.update({
  id: '/climbing/',
  path: '/climbing/',
  getParentRoute: () => LangRoute,
} as any)

const LangClimbingUserIdRoute = LangClimbingUserIdImport.update({
  id: '/climbing/$userId',
  path: '/climbing/$userId',
  getParentRoute: () => LangRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangImport
      parentRoute: typeof rootRoute
    }
    '/$lang/resoling': {
      id: '/$lang/resoling'
      path: '/resoling'
      fullPath: '/$lang/resoling'
      preLoaderRoute: typeof LangResolingImport
      parentRoute: typeof LangImport
    }
    '/$lang/': {
      id: '/$lang/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangIndexImport
      parentRoute: typeof LangImport
    }
    '/$lang/climbing/$userId': {
      id: '/$lang/climbing/$userId'
      path: '/climbing/$userId'
      fullPath: '/$lang/climbing/$userId'
      preLoaderRoute: typeof LangClimbingUserIdImport
      parentRoute: typeof LangImport
    }
    '/$lang/climbing/': {
      id: '/$lang/climbing/'
      path: '/climbing'
      fullPath: '/$lang/climbing'
      preLoaderRoute: typeof LangClimbingIndexImport
      parentRoute: typeof LangImport
    }
  }
}

// Create and export the route tree

interface LangRouteChildren {
  LangResolingRoute: typeof LangResolingRoute
  LangIndexRoute: typeof LangIndexRoute
  LangClimbingUserIdRoute: typeof LangClimbingUserIdRoute
  LangClimbingIndexRoute: typeof LangClimbingIndexRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangResolingRoute: LangResolingRoute,
  LangIndexRoute: LangIndexRoute,
  LangClimbingUserIdRoute: LangClimbingUserIdRoute,
  LangClimbingIndexRoute: LangClimbingIndexRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/resoling': typeof LangResolingRoute
  '/$lang/': typeof LangIndexRoute
  '/$lang/climbing/$userId': typeof LangClimbingUserIdRoute
  '/$lang/climbing': typeof LangClimbingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang/resoling': typeof LangResolingRoute
  '/$lang': typeof LangIndexRoute
  '/$lang/climbing/$userId': typeof LangClimbingUserIdRoute
  '/$lang/climbing': typeof LangClimbingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/resoling': typeof LangResolingRoute
  '/$lang/': typeof LangIndexRoute
  '/$lang/climbing/$userId': typeof LangClimbingUserIdRoute
  '/$lang/climbing/': typeof LangClimbingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/$lang/resoling'
    | '/$lang/'
    | '/$lang/climbing/$userId'
    | '/$lang/climbing'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang/resoling'
    | '/$lang'
    | '/$lang/climbing/$userId'
    | '/$lang/climbing'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/$lang/resoling'
    | '/$lang/'
    | '/$lang/climbing/$userId'
    | '/$lang/climbing/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangRoute: typeof LangRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangRoute: LangRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$lang"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$lang": {
      "filePath": "$lang.tsx",
      "children": [
        "/$lang/resoling",
        "/$lang/",
        "/$lang/climbing/$userId",
        "/$lang/climbing/"
      ]
    },
    "/$lang/resoling": {
      "filePath": "$lang/resoling.tsx",
      "parent": "/$lang"
    },
    "/$lang/": {
      "filePath": "$lang/index.tsx",
      "parent": "/$lang"
    },
    "/$lang/climbing/$userId": {
      "filePath": "$lang/climbing/$userId.tsx",
      "parent": "/$lang"
    },
    "/$lang/climbing/": {
      "filePath": "$lang/climbing/index.tsx",
      "parent": "/$lang"
    }
  }
}
ROUTE_MANIFEST_END */
