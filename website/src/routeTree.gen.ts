/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LangRouteImport } from './routes/$lang'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LangIndexRouteImport } from './routes/$lang/index'
import { Route as LangResolingRouteImport } from './routes/$lang/resoling'
import { Route as LangClimbingIndexRouteImport } from './routes/$lang/climbing/index'
import { Route as LangClimbingUserIdRouteImport } from './routes/$lang/climbing/$userId'

const LangRoute = LangRouteImport.update({
  id: '/$lang',
  path: '/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LangIndexRoute = LangIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LangRoute,
} as any)
const LangResolingRoute = LangResolingRouteImport.update({
  id: '/resoling',
  path: '/resoling',
  getParentRoute: () => LangRoute,
} as any)
const LangClimbingIndexRoute = LangClimbingIndexRouteImport.update({
  id: '/climbing/',
  path: '/climbing/',
  getParentRoute: () => LangRoute,
} as any)
const LangClimbingUserIdRoute = LangClimbingUserIdRouteImport.update({
  id: '/climbing/$userId',
  path: '/climbing/$userId',
  getParentRoute: () => LangRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/resoling': typeof LangResolingRoute
  '/$lang/': typeof LangIndexRoute
  '/$lang/climbing/$userId': typeof LangClimbingUserIdRoute
  '/$lang/climbing': typeof LangClimbingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lang/resoling': typeof LangResolingRoute
  '/$lang': typeof LangIndexRoute
  '/$lang/climbing/$userId': typeof LangClimbingUserIdRoute
  '/$lang/climbing': typeof LangClimbingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$lang': typeof LangRouteWithChildren
  '/$lang/resoling': typeof LangResolingRoute
  '/$lang/': typeof LangIndexRoute
  '/$lang/climbing/$userId': typeof LangClimbingUserIdRoute
  '/$lang/climbing/': typeof LangClimbingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lang'
    | '/$lang/resoling'
    | '/$lang/'
    | '/$lang/climbing/$userId'
    | '/$lang/climbing'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lang/resoling'
    | '/$lang'
    | '/$lang/climbing/$userId'
    | '/$lang/climbing'
  id:
    | '__root__'
    | '/'
    | '/$lang'
    | '/$lang/resoling'
    | '/$lang/'
    | '/$lang/climbing/$userId'
    | '/$lang/climbing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LangRoute: typeof LangRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang': {
      id: '/$lang'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$lang/': {
      id: '/$lang/'
      path: '/'
      fullPath: '/$lang/'
      preLoaderRoute: typeof LangIndexRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/resoling': {
      id: '/$lang/resoling'
      path: '/resoling'
      fullPath: '/$lang/resoling'
      preLoaderRoute: typeof LangResolingRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/climbing/': {
      id: '/$lang/climbing/'
      path: '/climbing'
      fullPath: '/$lang/climbing'
      preLoaderRoute: typeof LangClimbingIndexRouteImport
      parentRoute: typeof LangRoute
    }
    '/$lang/climbing/$userId': {
      id: '/$lang/climbing/$userId'
      path: '/climbing/$userId'
      fullPath: '/$lang/climbing/$userId'
      preLoaderRoute: typeof LangClimbingUserIdRouteImport
      parentRoute: typeof LangRoute
    }
  }
}

interface LangRouteChildren {
  LangResolingRoute: typeof LangResolingRoute
  LangIndexRoute: typeof LangIndexRoute
  LangClimbingUserIdRoute: typeof LangClimbingUserIdRoute
  LangClimbingIndexRoute: typeof LangClimbingIndexRoute
}

const LangRouteChildren: LangRouteChildren = {
  LangResolingRoute: LangResolingRoute,
  LangIndexRoute: LangIndexRoute,
  LangClimbingUserIdRoute: LangClimbingUserIdRoute,
  LangClimbingIndexRoute: LangClimbingIndexRoute,
}

const LangRouteWithChildren = LangRoute._addFileChildren(LangRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LangRoute: LangRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
